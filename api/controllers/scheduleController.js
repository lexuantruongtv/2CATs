import Schedule from '../models/scheduleModel.js';

/**
 * @swagger
 * /api/schedules:
 *   post:
 *     summary: T·∫°o m·ªõi m·ªôt l·ªãch tr√¨nh
 *     description: Th√™m s·ª± ki·ªán m·ªõi v·ªõi ti√™u ƒë·ªÅ, th·ªùi gian v√† m√¥ t·∫£.
 *     tags:
 *       - Schedules
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - title
 *               - time
 *             properties:
 *               title:
 *                 type: string
 *               time:
 *                 type: string
 *                 format: date-time
 *               description:
 *                 type: string
 *     responses:
 *       201:
 *         description: T·∫°o l·ªãch th√†nh c√¥ng
 *       400:
 *         description: Th·ªùi gian ƒë√£ c√≥ s·ª± ki·ªán kh√°c
 *       500:
 *         description: L·ªói server
 */
export const createSchedule = async (req, res) => {
  try {
    const { title, time, description } = req.body;
    const existingTime = await Schedule.findOne({ time });
    if (existingTime) {
      return res.status(400).json({ message: 'Th·ªùi gian n√†y ƒë√£ c√≥ m·ªôt s·ª± ki·ªán kh√°c!' });
    }

    const newSchedule = new Schedule({ title, time, description });
    await newSchedule.save();

    res.status(201).json({ message: 'T·∫°o l·ªãch th√†nh c√¥ng! üê±üéâ' });
  } catch (err) {
    res.status(500).json({ message: ` ${err.message}` });
  }
};

/**
 * @swagger
 * /api/schedules/{id}:
 *   put:
 *     summary: C·∫≠p nh·∫≠t l·ªãch tr√¨nh theo ID
 *     description: C·∫≠p nh·∫≠t th√¥ng tin s·ª± ki·ªán d·ª±a v√†o ID.
 *     tags:
 *       - Schedules
 *     parameters:
 *       - name: id
 *         in: path
 *         description: ID l·ªãch tr√¨nh
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *               time:
 *                 type: string
 *                 format: date-time
 *               description:
 *                 type: string
 *     responses:
 *       200:
 *         description: C·∫≠p nh·∫≠t th√†nh c√¥ng
 *       400:
 *         description: Tr√πng th·ªùi gian v·ªõi s·ª± ki·ªán kh√°c
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y l·ªãch tr√¨nh
 *       500:
 *         description: L·ªói server
 */
export const updateSchedule = async (req, res) => {
  try {
    const { id } = req.params;
    const { title, time, description } = req.body;

    const schedule = await Schedule.findById(id);
    if (!schedule) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªãch tr√¨nh!' });
    }

    if (time && time !== schedule.time.toISOString()) {
      const existingTime = await Schedule.findOne({ time, _id: { $ne: id } });
      if (existingTime) {
        return res.status(400).json({ message: 'Th·ªùi gian n√†y ƒë√£ c√≥ m·ªôt s·ª± ki·ªán kh√°c!' });
      }
    }

    schedule.title = title || schedule.title;
    schedule.time = time || schedule.time;
    schedule.description = description || schedule.description;
    
    await schedule.save();

    res.status(200).json({ message: 'C·∫≠p nh·∫≠t l·ªãch tr√¨nh th√†nh c√¥ng! üìù‚úÖ' });
  } catch (err) {
    res.status(500).json({ message: ` ${err.message}` });
  }
};

/**
 * @swagger
 * /api/schedules/{id}:
 *   delete:
 *     summary: Xo√° l·ªãch tr√¨nh theo ID
 *     description: Xo√° s·ª± ki·ªán theo ID t·ª´ database.
 *     tags:
 *       - Schedules
 *     parameters:
 *       - name: id
 *         in: path
 *         description: ID l·ªãch tr√¨nh c·∫ßn xo√°
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Xo√° th√†nh c√¥ng
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y l·ªãch tr√¨nh
 *       500:
 *         description: L·ªói server
 */
export const deleteSchedule = async (req, res) => {
  try {
    const { id } = req.params;

    const deletedSchedule = await Schedule.findByIdAndDelete(id);
    if (!deletedSchedule) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªãch tr√¨nh ƒë·ªÉ xo√°!' });
    }

    res.status(200).json({ message: 'Xo√° l·ªãch tr√¨nh th√†nh c√¥ng! üóëÔ∏è‚ùå' });
  } catch (err) {
    res.status(500).json({ message: ` ${err.message}` });
  }
};

/**
 * @swagger
 * /api/schedules/{id}:
 *   get:
 *     summary: L·∫•y l·ªãch tr√¨nh theo ID
 *     description: Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa l·ªãch tr√¨nh theo ID.
 *     tags:
 *       - Schedules
 *     parameters:
 *       - name: id
 *         in: path
 *         description: ID l·ªãch tr√¨nh
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: L·∫•y th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 _id:
 *                   type: string
 *                 title:
 *                   type: string
 *                 time:
 *                   type: string
 *                   format: date-time
 *                 description:
 *                   type: string
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y l·ªãch tr√¨nh
 *       500:
 *         description: L·ªói server
 */
export const getSchedule = async (req, res) => {
  try {
    const { id } = req.params;

    const schedule = await Schedule.findById(id);
    if (!schedule) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªãch tr√¨nh!' });
    }

    res.status(200).json(schedule);
  } catch (err) {
    res.status(500).json({ message: ` ${err.message}` });
  }
};
